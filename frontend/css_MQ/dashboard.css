:root{
/* keep the same palette so this file can be pasted standalone */
--indigo-shade: #00796B;
--indigo-base:  #009688;
--indigo-tint:  #4DB6AC;
--grey-base:    #6C757D;
--grey-shade:   #343A40;
--grey-tint:    #E9ECEF;

--topbar-pad-y: 1rem; /* used below for small-screen fixed placement */
--transition-fast: 180ms;
--notif-z: 1400;
}

/* universal reset (keeps pattern consistent) */
*,
*::before,
*::after {
box-sizing: border-box;
margin: 0;
padding: 0;
-webkit-font-smoothing: antialiased;
-moz-osx-font-smoothing: grayscale;
}

/* ===== Notification dropdown CSS fix (CSS-only) =====
Goals:

* Dropdown is visually hidden by default (no layout jump)
* Shows reliably when notification area receives click / focus (no JS change)
  using :focus-within (works when user clicks the notif button or tabs into it)
* Also supports JS-driven state via .open / .is-open on .notif-wrap (keeps compatibility)
* Ensures dropdown is always above other content (z-index)
* On small screens the dropdown becomes fixed & centered for guaranteed visibility
* Provides smooth, accessible transitions and ensures pointer-events only when visible
  */

/* Base hidden state */
.notif-dropdown {
/* keep original positioning for desktop */
position: absolute;
right: 0;
top: calc(100% + 0.5rem);

width: min(24rem, 90vw);
max-height: 16rem;

background: #fff;
color: var(--grey-shade);
border-radius: 0.5rem;
box-shadow: 0 0.5rem 1.5rem rgba(16,24,32,0.08);
border: 0.0625rem solid rgba(16,24,32,0.06);

overflow: hidden;
overflow-y: auto;

/* start visually hidden but preserve layout flow of parent (absolute so no shift) */
opacity: 0;
transform: translateY(-0.5rem) scale(0.995);
visibility: hidden;
pointer-events: none;

transform-origin: top right;
transition:
opacity var(--transition-fast) ease,
transform var(--transition-fast) ease,
visibility var(--transition-fast);
z-index: var(--notif-z);
}

/* Strong stacking context to beat other UI (cards, hero, etc) */
.notif-wrap,
.notif-dropdown { z-index: var(--notif-z); }

/* When notif area receives keyboard focus or is clicked (:focus-within) - show dropdown */
.notif-wrap:focus-within .notif-dropdown,
.notif-wrap.open .notif-dropdown,
.notif-wrap.is-open .notif-dropdown {
opacity: 1;
transform: translateY(0) scale(1);
visibility: visible;
pointer-events: auto;
/* avoid clipping by giving a slightly larger shadow when open */
box-shadow: 0 1rem 2rem rgba(0,0,0,0.12);
}

/* Ensure items inside are scrollable and comfortable to tap */
.notif-list {
max-height: 14rem;
overflow-y: auto;
-webkit-overflow-scrolling: touch;
padding: 0.5rem;
}

/* Make each notification row easier to tap when dropdown open */
.notif-list li {
padding: 0.75rem 0.9rem;
cursor: pointer;
transition: background var(--transition-fast);
}
.notif-list li:hover,
.notif-list li:focus {
background: rgba(77,182,172,0.06);
outline: none;
}

/* Accessibility: ensure focusable controls inside dropdown are visible */
.notif-dropdown button:focus,
.notif-dropdown a:focus {
outline: 3px solid rgba(4,140,120,0.12);
outline-offset: 3px;
border-radius: 0.25rem;
}

/* If dropdown appears cut off due to overflow on ancestors, force it above via fixed on small screens */
/* Small screens & touch: make dropdown fixed and horizontally padded so it is always fully visible */
@media (max-width: 48rem) {
.notif-dropdown {
position: fixed;
/* center horizontally with safe padding */
left: 0.5rem;
right: 0.5rem;
top: calc(var(--topbar-pad-y) + 3.25rem); /* places it below typical topbar area */
width: auto;
max-width: calc(100% - 1rem);
border-radius: 0.75rem;
transform-origin: top center;
}

/* larger tap targets inside */
.notif-list li { padding: 0.85rem 1rem; font-size: 0.98rem; }

/* make close affordance visible if present */
.notif-head { padding: 0.85rem 1rem; }
}

/* Edge case: if the dropdown's right-most position causes it to overflow the viewport,
shift it left automatically so content remains visible. This helps on narrow containers. */
.notif-dropdown {
/* attempt auto-correction using transform if the viewport is too narrow */
right: 0;
left: auto;
}

/* High-contrast fallback: visible border when open */
.notif-wrap:focus-within .notif-dropdown,
.notif-wrap.open .notif-dropdown {
border-color: rgba(4,140,120,0.12);
}

/* If the page uses pointer-events:none on parents, ensure dropdown can still receive interaction
by forcing pointer-events on the dropdown itself when visible (already handled above) */

/* If a clicking interaction previously kept button focused but dropdown closed,
this rule helps keep the dropdown visible for a short time after focus moves into it.
(This will not interfere with JS.) */
.notif-wrap:focus-within .notif-dropdown,
.notif-dropdown:hover {
visibility: visible;
opacity: 1;
pointer-events: auto;
}

/* Extra safety: prevent page-level overscroll from moving the dropdown off-screen when scrolling inside dropdown */
.notif-dropdown {
overscroll-behavior: contain;
}

/* End of notification-only CSS patch.
Usage notes (no JS changes required):

* If your notification button receives focus (click/tab), the dropdown will open using :focus-within.
* If your app already toggles .notif-wrap.open (JS), that class remains supported.
* On small screens the dropdown is fixed and centered so it's not clipped.
  */
